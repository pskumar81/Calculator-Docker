name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Test with Cake
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test with Cake
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Calculator.Web/package-lock.json
        
    - name: Restore .NET tools
      run: dotnet tool restore
      
    - name: Run Cake CI pipeline
      run: dotnet cake build.cake --target=CI --configuration=Release
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: artifacts/test-results/
        
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: artifacts/packages/

  # Job 2: Build Docker Images
  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: build-and-test
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [calculator-server, calculator-client, calculator-web]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Calculator.${{ matrix.service == 'calculator-server' && 'Server' || matrix.service == 'calculator-client' && 'Client' || 'Web' }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 4: Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [build-docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run integration tests with Docker Compose
      run: |
        # Start the services
        docker-compose up -d calculator-server calculator-web
        
        # Wait for services to be ready
        sleep 30
        
        # Test server health
        curl -f http://localhost:5001 || exit 1
        
        # Test web client
        curl -f http://localhost:4200 || exit 1
        
        # Stop services
        docker-compose down
        
  # Job 5: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-calculator-server:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 6: Deploy (only on master branch)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [integration-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "âœ… Calculator Server image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-calculator-server:latest"
        echo "âœ… Calculator Web image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-calculator-web:latest"
        echo "âœ… Calculator Client image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-calculator-client:latest"
        
        # Add your deployment commands here
        # For example: kubectl apply -f k8s/ or docker stack deploy
        
    - name: Notification
      run: |
        echo "ðŸŽ‰ Deployment completed successfully!"